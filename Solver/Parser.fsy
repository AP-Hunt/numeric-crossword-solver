%{
open Types
%}

// The start token becomes a parser function in the compiled code:
%start start

// Data type tokens
%token <int> INT
%token <Location> LOCATION

// English tokens
%token COMMA
%token COLON
%token AND
%token MINUS
%token DIRECTION_DOWN
%token DIRECTION_ACROSS
%token FIRST
%token DIGITS
%token OF
%token PLUS
%token LAST

// Challenge tokens
%token PARSE_CHALLENGE_PREFIX_SQUARES
%token PARSE_CHALLENGE_PREFIX_ONE_QUARTER

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <Challenge option> start

%%

start: root { $1 }

root: 
    | EOF { None }
    | challenge { Some $1 }

challenge:
    | location COLON question { {Location = $1; Question = $3} }
    | { failwith "unable to parse challenge '%s'" }

question:
    // QUESTION: Squares of ints
    | PARSE_CHALLENGE_PREFIX_SQUARES number_list    { SquaresSequence($2) }
    
    // QUESTION: location minus location
    | location MINUS location                       { LocationMinusLocation($1, $3) }
    
    // QUESTION: one quarter of location
    | PARSE_CHALLENGE_PREFIX_ONE_QUARTER location   { OneQuarterOfLocation($2) }

    // QUESTION: N M digit of location sum
    | FIRST INT DIGITS OF location PLUS LAST INT { NMDigitsOfLocationSum($2, $8, $5) }

    // UNKNOWN
    | { Unknown }

number_list:
    | number_list AND INT   { $1@[$3] }
    | INT COMMA number_list { [$1]@$3 }
    | INT number_list       { [$1]@$2 }
    |                       { [] }

location:
    | INT DIRECTION_ACROSS  { ($1, Across) }
    | INT DIRECTION_DOWN    { ($1, Down) }